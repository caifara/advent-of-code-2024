require_relative "../test_setup"
require_relative "./parts"

describe Day14::Part1 do
  def do_action(input)
  end

  robots_and_steps = [
    [
      <<~ROBOTS,
        p=2,4 v=2,-3
      ROBOTS
      {
        0 => <<~MAP,
          ...........
          ...........
          ...........
          ...........
          ..1........
          ...........
          ...........
        MAP
        1 => <<~MAP,
          ...........
          ....1......
          ...........
          ...........
          ...........
          ...........
          ...........
        MAP
        2 => <<~MAP,
          ...........
          ...........
          ...........
          ...........
          ...........
          ......1....
          ...........
        MAP
        3 => <<~MAP,
          ...........
          ...........
          ........1..
          ...........
          ...........
          ...........
          ...........
        MAP
        4 => <<~MAP,
          ...........
          ...........
          ...........
          ...........
          ...........
          ...........
          ..........1
        MAP
        5 => <<~MAP,
          ...........
          ...........
          ...........
          .1.........
          ...........
          ...........
          ...........
        MAP
      },
    ],
    [
      <<~ROBOTS,
        p=0,4 v=3,-3
        p=6,3 v=-1,-3
        p=10,3 v=-1,2
        p=2,0 v=2,-1
        p=0,0 v=1,3
        p=3,0 v=-2,-2
        p=7,6 v=-1,-3
        p=3,0 v=-1,-2
        p=9,3 v=2,3
        p=7,3 v=-1,2
        p=2,4 v=2,-3
        p=9,5 v=-3,-3
      ROBOTS
      {
        0 => <<~MAP,
          1.12.......
          ...........
          ...........
          ......11.11
          1.1........
          .........1.
          .......1...
        MAP
        100 => <<~MAP,
          ......2..1.
          ...........
          1..........
          .11........
          .....1.....
          ...12......
          .1....1....
        MAP
      },
    ],
  ]

  robots_and_steps.each_with_index do |(input, steps), i|
    steps.each do |step_count, solution|
      # next unless i == 0 && step_count == 4

      solution = solution.strip

      it "handles #{step_count} for #{input} correctly" do
        output = described_class.new(input)
          .tap { |p| p.set_map(width: 11, height: 7) }
          .tap { |p| step_count.times { p.tick } }
          .serialize
        expect(output).to eq(solution)
      end
    end
  end

  it "calculates the safety factor correctly" do
    input = <<~ROBOTS
      p=0,4 v=3,-3
      p=6,3 v=-1,-3
      p=10,3 v=-1,2
      p=2,0 v=2,-1
      p=0,0 v=1,3
      p=3,0 v=-2,-2
      p=7,6 v=-1,-3
      p=3,0 v=-1,-2
      p=9,3 v=2,3
      p=7,3 v=-1,2
      p=2,4 v=2,-3
      p=9,5 v=-3,-3
    ROBOTS

    safety_factor = described_class.new(input)
      .tap { |p| p.set_map(width: 11, height: 7) }
      .solve
    expect(safety_factor).to eq(12)
  end
end

describe Day14::Part2 do
  def do_action(input)
    described_class.new(input).solve
  end
end
